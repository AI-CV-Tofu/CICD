pipeline {
    agent any
    triggers {
        githubPush()
    }
    stages {
        stage('Debug') {
            steps {
                echo "Build Cause: ${currentBuild.getBuildCauses()}"
            }
        }
        stage('Build Trigger for Main Branch') {
            steps {
                git url: "https://github.com/AI-CV-Tofu/client.git",
                branch: "main"
            }
        }
        stage('Clone or Pull repository') {
            steps {
                script {
                    sh '''
                    #!/bin/bash
                    cd /home/ubuntu
                    if [ -d ".git" ]; then
                        echo "Repository exists, pulling latest changes from main branch..."
                        git config --global --add safe.directory /home/ubuntu
                        git checkout main
                        git pull origin main
                    else
                        echo "Repository does not exist, cloning main branch..."
                        git config --global --add safe.directory /home/ubuntu
                        git config --global init.defaultBranch main
                        git init
                        git branch -M main
                        git remote add origin https://github.com/wellcheck-AI/llm_AnswerGen.git
                        git pull origin main
                    fi
                    '''
                }
            }
        }
        stage('Install dependencies') {
            steps {
                script {
                    sh '''
                    #!/bin/bash
                    cd /home/ubuntu
                    echo "현재 작업 디렉토리: $(pwd)"

                    VENV_DIR="./.venv"
                    
                    # 가상환경이 활성화되어 있는지 확인
                    if [ "$VIRTUAL_ENV" != "" ]; then
                        echo "가상환경이 이미 활성화되어 있습니다."
                    else
                        # 가상환경이 존재하는지 확인
                        if [ -d "$VENV_DIR" ] && [ -f "$VENV_DIR/bin/activate" ]; then
                            echo "가상환경을 활성화합니다."
                            . "$VENV_DIR/bin/activate"
                        else
                            echo "가상환경이 존재하지 않습니다. 새 가상환경을 생성합니다."
                            python3 -m venv "$VENV_DIR"  # 가상환경 생성
                            echo "가상환경을 활성화합니다."
                            . "$VENV_DIR/bin/activate"
                        fi
                    fi
                    
                    # 의존성 설치
                    pip install -r requirements.txt
                    '''
                }
            }
        }
        stage('Restart Streamlit App') {
            steps {
                script {
                    sh '''
                    cd /home/ubuntu
                    . ./.venv/bin/activate
                    # 기존 Streamlit 앱 종료
                    pkill -f pkill -f "streamlit run main.py" || true  # 기존 프로세스가 없으면 오류 방지
                    # Streamlit 앱 다시 시작
                    JENKINS_NODE_COOKIE=dontKillMe && nohup streamlit run main.py > output.log 2>&1 &
                    '''
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo '>>>>>>>>>>>>>Pipeline failed.<<<<<<<<<<<<<'
        }
        aborted {
            echo 'Pipeline was aborted'
        }
        always {
            cleanWs()
            echo 'Workspace cleaned.'
        }
    }
}